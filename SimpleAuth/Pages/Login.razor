@page "/login"

@layout BlankLayout

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorageService
@inject AuthService service

<section class="h-screen">
    <div class="container px-6 py-12 h-full">
        <div class="text-center text-gray-500 px-6 md:px-12">
            <h1 class="text-xl md:text-5xl font-bold mt-10 md:mt-12 -mb-24">Simple Authentication Demo</h1>
        </div>
        <div class="flex justify-center items-center flex-wrap h-full g-6 text-gray-800">
            <div class="md:w-8/12 lg:w-6/12 mb-12 md:mb-0 hidden md:block">
                <img src="images/login.jpg"
                     class="w-full"
                     alt="Phone image" />
            </div>
            <div class="md:w-8/12 lg:w-5/12 lg:ml-20">
                
                @if(!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="bg-red-500 text-white flex justify-center items-center h-10">
                        <p class="mr-auto ml-auto">@errorMessage</p>
                    </div>
                }                
                <form>
                    <!-- Email input -->
                    <div class="mb-6">
                        <input type="text"
                               class="form-control block w-full px-4 py-2 text-xl font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                               placeholder="Email address" @bind-value=logingUser.EmailAddress/>
                    </div>

                    <!-- Password input -->
                    <div class="mb-6">
                        <input type="password"
                               class="form-control block w-full px-4 py-2 text-xl font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                               placeholder="Password" @bind-value=logingUser.Password @onkeyup="@Enter"/>
                    </div>

                    <div class="flex justify-between items-center mb-6">
                        <div class="form-group form-check">
                            <input type="checkbox"
                                   class="form-check-input appearance-none h-4 w-4 border border-gray-300 rounded-sm bg-white checked:bg-blue-600 checked:border-blue-600 focus:outline-none transition duration-200 mt-1 align-top bg-no-repeat bg-center bg-contain float-left mr-2 cursor-pointer"
                                   id="exampleCheck3"
                                   checked />
                            <label class="form-check-label inline-block text-gray-800" for="exampleCheck2">Remember me</label>
                        </div>
                        <a href="/forgotpassword"
                           class="text-blue-600 hover:text-blue-700 focus:text-blue-700 active:text-blue-800 duration-200 transition ease-in-out">Forgot password?</a>
                    </div>

                    <!-- Submit button -->
                    <button type="button"
                            class="inline-block px-7 py-3 bg-blue-600 text-white font-medium text-sm leading-snug uppercase rounded shadow-md hover:bg-blue-700 hover:shadow-lg focus:bg-blue-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg transition duration-150 ease-in-out w-full"
                            data-mdb-ripple="true"
                            data-mdb-ripple-color="light" @onclick=LoginSubmit>
                        Log In
                    </button>
                </form>
            </div>
        </div>
    </div>
</section>

@code {

    private User logingUser = new User();
    private string errorMessage = "";

    private async Task<bool> LoginSubmit()
    {
        //validate user info
        if(string.IsNullOrEmpty(logingUser.EmailAddress) || string.IsNullOrEmpty(logingUser.Password))
        {
            //display validation message
            errorMessage = "Email and password are required to log in";
            return false;
        }

        //validate user info
        if(service.AuthenicateUser(logingUser, (CustomAuthenicationStateProvider)AuthenticationStateProvider, sessionStorageService))
        {
            navManager.NavigateTo("/");            
            return await Task.FromResult(true);
        }

        //log in fails
        errorMessage = "Log in failed, please see system admin";
        logingUser.EmailAddress = "";
        logingUser.Password = "";
        StateHasChanged();
        return false;
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await LoginSubmit();
        }
    }


}
